import numpy as np
import matplotlib.pyplot as plt
import os

import fire
def plt_utils(save_path,title,
	      x,x_label,y,y_label
):
	plt.figure()
	plt.title(title)
	plt.plot(x,'r',label=x_label)
	plt.plot(y,'b',label=y_label)
	plt.legend(loc="upper right")
	# plt.show()
	plt.savefig(save_path)
	plt.close()
	return
def plt_dif_plt_hist(save_path_stem,title,x,x_label):
	plt.figure()
	plt.title(title)
	plt.plot(x[:,1]-x[:,0],'r')
	plt.savefig(f'{save_path_stem}.png')
	plt.close()

	plt.figure()
	plt.title(title)
	plt.hist(np.sort(x[:,1]-x[:,0]),bins=10,color='b',edgecolor='k')
	plt.xlabel(x_label)
	plt.savefig(f'{save_path_stem}_Hist.png')
	plt.close()
	return

def main(save_dir = "VisualizeResult"):
	os.makedirs(save_dir,exist_ok=True)
	"""
	'report.txt' is generated by eval2008.pl
		DRL results on odd line, A* results on even line
    	Total OF on 0 column, Wire Length on 1 column
	"""
	result = np.loadtxt('report.txt',delimiter=',')   # print(result.shape[0])
    #extract DRL results on odd line, A* results on even line
	DRL_data = np.empty((0,2)); Astar_data = np.empty((0,2))
	for i in range(int(result.shape[0])):
		resulti = [int(result[i,0]),int(result[i,1])]
		if i%2 == 0: # DRL result
			DRL_data = np.vstack((DRL_data,resulti))
		else:
			Astar_data = np.vstack((Astar_data,resulti))	
	print(len(DRL_data),len(Astar_data))
	# print(DRL_data[-10:])
	# print(Astar_data[-10:])

	#DRL result on 0 column, A* result on 1 column 
	# print(DRL_data[:,0].reshape(-1,1),"???",Astar_data[:,0].reshape(-1,1),">>>")
	of_data = np.hstack((DRL_data[:,0].reshape(-1,1),Astar_data[:,0].reshape(-1,1)))
	wl_data = np.hstack((DRL_data[:,1].reshape(-1,1),Astar_data[:,1].reshape(-1,1)))
	
	wl_data_list = wl_data.tolist(); of_data_list = of_data.tolist()
	# print(wl_data_list,'wl')
	# print(of_data_list,'of')
	# # Sort data w.r.t. DRL or A* result
	wl_data_list.sort(key=lambda x: x[0]); of_data_list.sort(key=lambda x: x[0])
	wl_data_arrayDRLsort = np.asarray(wl_data_list)
	of_data_arrayDRLsort = np.asarray(of_data_list)

	wl_data_list.sort(key=lambda x: x[1]); of_data_list.sort(key=lambda x: x[1])
	wl_data_arrayAstarsort = np.asarray(wl_data_list)
	of_data_arrayAstarsort = np.asarray(of_data_list)


	# # # Plot results 
	plt_utils(f'{save_dir}/WLwithSortedDRL.png',
	   'Wirelength plots with sorted DRL solutions',
	   wl_data_arrayDRLsort[:,0],'DRL solution',
	   wl_data_arrayDRLsort[:,1],'A* solution'
	)
	plt_utils(f'{save_dir}/WLwithSortedAstar.png',
	   'Wirelength plots with sorted Astar solutions',
	   wl_data_arrayAstarsort[:,0],'DRL solution',
	   wl_data_arrayAstarsort[:,1],'A* solution'
	)

	#-------------------------------------------------------------#
	plt_utils(f'{save_dir}/OFwithSortedDRL.png',
	   'Overflow plots with sorted DRL solutions',
	   of_data_arrayDRLsort[:,0],'DRL solution',
	   of_data_arrayDRLsort[:,1],'A* solution'
	)
	plt_utils(f'{save_dir}/OFwithSortedAstar.png',
	   'Overflow plots with sorted Astar solutions',
	   of_data_arrayAstarsort[:,0],'DRL solution',
	   of_data_arrayAstarsort[:,1],'A* solution'
	)

	#-------------------------------------------------------------#
	wl_diff = wl_data_arrayDRLsort[:,1]-wl_data_arrayDRLsort[:,0]
	DRL_win_rate = len(np.where(wl_diff>0)[0])/len(wl_diff)
	print('DRL_win_rate',DRL_win_rate)

	# Difference plots based on Astar sort
	plt_dif_plt_hist(f'{save_dir}/DecreasdWL_DRLsol',
		  'Decrease in Wirelength for DRL solutions',
		  wl_data_arrayDRLsort,'Decreased WL')
    #-----------------------------------------------------------#
	plt_dif_plt_hist(f'{save_dir}/DecreasdOF_DRLsol',
		  'Decrease in Overflow for DRL solutions',
		  of_data_arrayDRLsort,'Decreased OF')
	#-----------------------------------------------------------#


if __name__ == '__main__':
	fire.Fire(main)











